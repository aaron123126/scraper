<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <h1 class="mb-4">
        <i class="bi bi-archive"></i> Web Archive Viewer
      </h1>
    </div>
  </div>

  <div class="row mb-4">
    <div class="col-md-8">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title mb-0">
            <i class="bi bi-folder2-open"></i> Available Archives
          </h5>
        </div>
        <div class="card-body">
          <div id="archivesList" class="table-responsive">
            <div class="text-center py-5">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="col-md-4">
      <div class="card mb-3">
        <div class="card-header">
          <h5 class="card-title mb-0">
            <i class="bi bi-speedometer2"></i> Cache Status
          </h5>
        </div>
        <div class="card-body">
          <div id="cacheInfo">
            <div class="text-center">
              <div class="spinner-border spinner-border-sm" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="card">
        <div class="card-header">
          <h5 class="card-title mb-0">
            <i class="bi bi-cloud-upload"></i> Upload Archive
          </h5>
        </div>
        <div class="card-body">
          <form id="uploadForm" enctype="multipart/form-data">
            <div class="mb-3">
              <input type="file" class="form-control" id="archiveFile" accept=".tar.zst,.tar.gz" required>
              <small class="text-muted">Accepted formats: .tar.zst, .tar.gz</small>
            </div>
            <button type="submit" class="btn btn-primary w-100">
              <i class="bi bi-upload"></i> Upload
            </button>
          </form>
          <div id="uploadProgress" class="mt-3" style="display: none;">
            <div class="progress">
              <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Extraction Progress Modal -->
  <div class="modal fade" id="extractionModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Extracting Archive</h5>
        </div>
        <div class="modal-body">
          <p>Please wait while the archive is being extracted...</p>
          <div class="progress">
            <div id="extractionProgress" class="progress-bar progress-bar-striped progress-bar-animated" 
                 role="progressbar" style="width: 0%">0%</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  const socket = io();
  
  // Load archives on page load
  loadArchives();
  loadCacheInfo();

  async function loadArchives() {
    try {
      const response = await fetch('/api/archives');
      const data = await response.json();
      
      if (data.success) {
        displayArchives(data.archives);
      }
    } catch (error) {
      console.error('Failed to load archives:', error);
      document.getElementById('archivesList').innerHTML = 
        '<div class="alert alert-danger">Failed to load archives</div>';
    }
  }

  function displayArchives(archives) {
    if (archives.length === 0) {
      document.getElementById('archivesList').innerHTML = 
        '<div class="alert alert-info">No archives found</div>';
      return;
    }

    const table = `
      <table class="table table-hover">
        <thead>
          <tr>
            <th>Archive Name</th>
            <th>Size</th>
            <th>Modified</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          ${archives.map(archive => `
            <tr>
              <td>
                <i class="bi bi-file-zip text-primary"></i>
                ${archive.filename}
              </td>
              <td>${formatBytes(archive.size)}</td>
              <td>${new Date(archive.modified).toLocaleString()}</td>
              <td>
                <button class="btn btn-sm btn-primary" onclick="extractAndView('${archive.id}')">
                  <i class="bi bi-eye"></i> View
                </button>
              </td>
            </tr>
          `).join('')}
        </tbody>
      </table>
    `;

    document.getElementById('archivesList').innerHTML = table;
  }

  async function extractAndView(archiveId) {
    const modal = new bootstrap.Modal(document.getElementById('extractionModal'));
    modal.show();

    try {
      const response = await fetch(`/api/archives/${archiveId}/extract`, {
        method: 'POST'
      });
      
      const data = await response.json();
      
      if (data.success) {
        if (data.cached) {
          // Already extracted, redirect immediately
          window.location.href = `/view/${archiveId}`;
        } else {
          // Wait for extraction to complete
          socket.on('extraction-progress', (progressData) => {
            if (progressData.archiveId === archiveId) {
              updateExtractionProgress(progressData.progress);
              
              if (progressData.progress >= 100) {
                setTimeout(() => {
                  window.location.href = `/view/${archiveId}`;
                }, 500);
              }
            }
          });
        }
      }
    } catch (error) {
      console.error('Failed to extract archive:', error);
      modal.hide();
      alert('Failed to extract archive');
    }
  }

  function updateExtractionProgress(progress) {
    const progressBar = document.getElementById('extractionProgress');
    progressBar.style.width = `${progress}%`;
    progressBar.textContent = `${Math.round(progress)}%`;
  }

  async function loadCacheInfo() {
    try {
      const response = await fetch('/api/cache/info');
      const data = await response.json();
      
      if (data.success) {
        const usageClass = data.usage > 80 ? 'danger' : data.usage > 60 ? 'warning' : 'success';
        
        document.getElementById('cacheInfo').innerHTML = `
          <div class="mb-3">
            <div class="d-flex justify-content-between mb-1">
              <small>Cache Usage</small>
              <small>${formatBytes(data.size)} / ${formatBytes(data.maxSize)}</small>
            </div>
            <div class="progress">
              <div class="progress-bar bg-${usageClass}" style="width: ${data.usage}%"></div>
            </div>
          </div>
          <button class="btn btn-sm btn-outline-danger w-100" onclick="clearCache()">
            <i class="bi bi-trash"></i> Clear Cache
          </button>
        `;
      }
    } catch (error) {
      console.error('Failed to load cache info:', error);
    }
  }

  async function clearCache() {
    if (!confirm('Are you sure you want to clear the cache?')) return;
    
    try {
      const response = await fetch('/api/cache', { method: 'DELETE' });
      const data = await response.json();
      
      if (data.success) {
        alert('Cache cleared successfully');
        loadCacheInfo();
      }
    } catch (error) {
      console.error('Failed to clear cache:', error);
      alert('Failed to clear cache');
    }
  }

  // File upload handling
  document.getElementById('uploadForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const fileInput = document.getElementById('archiveFile');
    const file = fileInput.files[0];
    
    if (!file) return;
    
    const formData = new FormData();
    formData.append('archive', file);
    
    const progressDiv = document.getElementById('uploadProgress');
    const progressBar = progressDiv.querySelector('.progress-bar');
    
    progressDiv.style.display = 'block';
    
    try {
      const xhr = new XMLHttpRequest();
      
      xhr.upload.addEventListener('progress', (e) => {
        if (e.lengthComputable) {
          const percentComplete = (e.loaded / e.total) * 100;
          progressBar.style.width = `${percentComplete}%`;
          progressBar.textContent = `${Math.round(percentComplete)}%`;
        }
      });
      
      xhr.addEventListener('load', () => {
        if (xhr.status === 200) {
          alert('Archive uploaded successfully');
          fileInput.value = '';
          progressDiv.style.display = 'none';
          loadArchives();
        } else {
          alert('Upload failed');
        }
      });
      
      xhr.open('POST', '/api/upload');
      xhr.send(formData);
      
    } catch (error) {
      console.error('Upload failed:', error);
      alert('Upload failed');
      progressDiv.style.display = 'none';
    }
  });

  function formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
</script>